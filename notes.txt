1. Go: 
    -> It is statically typed, compiled open source programming language 
    -> designed by google.
    -> statically typed means value types are defined in advance (like we have to write variables types)
    -> compiled means code is compiled to machine code ahead of execution
    -> command: go run firstApp.go

2. Use:
    -> Go can be used to create all kinds of applications but it's especially
    -> popular for building scalable web servers or systems in general
    -> Go tries to combine the best of c++, java and python
    -> Engineers at google wanted to take performance of c++ but easier syntax and faster compilation time
    -> strict typing as in java and c++ for safety and unessary errors
    -> They also wanted the simplicity of python but better performance than python in some bigger projects
    -> They also wanted a lot of built-in features,
    -> so that Go is ready to use without having to install a bunch of third-party libraries
    -> But they also wanted the great third-party support
    -> Go is awesome for web services and apps automation-scripts command line programs

3. When not to use it:
    -> Games, c++, unity is best for it.
    -> desktop apps, mobile apps

4. main():
    -> main is special function which is executed by default when we execute a file.

5. semicolon:
    -> ; is optional if not added during the compilation go will add these for you.
    -> convention is to omit them

6. data types:
    string: stores text, double quotes are reserved for strings. multiline strings in Go with the special ` (backtick) 
    int: number without decimal places
    float64: number with decimal places (more precise than float32 but takes more memory)
    float32: number with decimal places takes less memory
    bool: stores boolean value
    byte: smallest possible storage unit, stores single character or more specifically single ascii character 
            internally any value in byte is stored as integer(uint)
            use single quotes for any value 
    rune: similar to byte but rune can store more characters. 
            here we are not limited to basic characters but we can also store emojis or anything like that
            internally any value in rune is stored as integer(int32)
            use single quotes for any value 
    

7. := operator 
    -> you always declare and define the variable in one step
    -> ("declare" means that you introduce the variable, "define" means that you assign a value to it).

8. var keyword
    -> If you create variables with the var keyword instead, 
    -> you can also declare + define in one step but you can also just declare the variable and define it at a later point of time
    -> var userName = "Max" // declaring + defining in one step
    -> var age int // declaring the variable
    -> age = 32 // defining a value for the variable

9. default variable value   
    -> the variable has a default value as an initial value - the so-called "null value".
    -> For int values, the default value is 0, for floats it's 0.0 and for string values (text), it's an empty string ("").

10. fmt package (formatting package)
    -> used for formatting and outputting strings
    -> fmt.Print(str), fmt.Printf(format, str), fmt.Println(str) 
    -> fmt.Printf("Hi My name is %v %v and my age is %v (Type: %T) years old", firstName, lastName, age, age)
    -> format string and output formatted string to standard output
    -> fmt.Sprint(str), fmt.Sprintf(format, str), fmt.Sprintln(str) 
    -> format string and return formatted string
    -> fmt.Fprint(w, str), fmt.Fprintf(w, format, str), fmt.Fprintln(w, str) 
    -> format string and write to specified writer


11. modules
    -> every .go file you create needs to belong to a package. (that's why package main)
    -> For bigger projects you might split up your projects into multiple packages 
    -> Go code is organized into modules and packages
    -> Modules are bigger than packages
    -> a module has a unique identifier and can be distributed(e.g library)
    -> every Go project goes into a new module
    -> projects can use(i.e import from) multiple modules (custom or third party)
    -> created and managed via Go mod commands and Go .mod file
    -> command: go mod init github.com/yourOrg/firstApp
    -> now to run command: go run . (it'll look for main package and main function)

12. packages
    -> every module contains atleast one package (the 'main' package)
    -> multiple files can make up the same package (via package instruction)
    -> a module may contain multiple packages, stored in subfolders
    -> can be imported

13. variable naming
    -> if you start the var name with lower case then it must be used in same package.(private)
    -> to be used in other packages it must be started with uppercase.(public)

14. const keyword
    -> to create constant variables
    -> const PI = 3.14
    -> function call cannot be assigned to const var
    -> because function will run inorder to get the value.
    -> but the const should be a value that's lockedIn before even app starts running

15. Reader
    -> To read data from the command prompt
    -> var reader = bufio.NewReader(os.Stdin);
    -> first create a reader instance
    -> reader.ReadString('\n');
    -> now this reader will capture the input whenever it encounters new line character 
    -> and it will also include '\n' in captured string 


16. 'strings' library
    -> if we want to remove that newline char
    -> we can use 'strings' library
    -> strings.Replace(weightInput, "\n", "", -1)
    -> args[0] -> input which needs to be char replacement
    -> args[1] -> what's need to be replaced
    -> args[2] ->  with what
    -> args[3] -> how many instances should be replaced (-1 to replace all)

16. 'strconv' library
    -> to convert string data type to another data type
    -> usage: weight, _ := strconv.ParseFloat(weightInput, 32)

17. To print float value upto certain number of decimal
    -> usage: fmt.Printf("Your BMI: %.2f", bmi)


18. Generate random number
    -> import "math/rand"
    -> rand.Intn(n int)
    -> it will generate a random number b/w 0 and n, excluding n
    -> learn more about it: https://gobyexample.com/random-numbers

19. Functions
    -> functions in Go can return more than one value
    -> return num1, num2
    -> we will also have to declare the return type, if we are returning multiple values
    -> function getNumbers() (int, int) {}
    -> using named return value
    -> we can declare return var and use it inside the function
    -> then we don't have to return the variable 
    -> ex: function getNumbers() (a int, b int) {
    ->    a = 5
    ->    b = 10
    ->    return
    -> }
    -> see we didn't used a:=10, because the var is already declared
    -> and this function will automatically return two value a and b
    -> we don't have to specify it
    -> we should use this approach in short function
    -> if we use it in long functions with lot of variables it will become very confusing
    
20. Pointers
    -> Pointers are variables which does not store value but the memory address
    -> where the actual value is stored.
    -> Advantages
    -> when passed to functions(as parameters) unnessary value copies can be avoided
    -> function may directly work with / on an input value (e.g. change it)
    -> ex: age := 45; 
    ->     myAge := &age
    ->     fmt.Printf("Address: %p, Actual Value: %v", myAge, *myAge)
    -> getting the value using '*myAge' is called dereferencing
    -> because we are diving into the address and getting that value
    -> *myAge = 77 will override the actual value stored at age variable
    -> ex: func doubleAge(age *int) int {
	->         return *age * 2
    ->     }

21. struct
    -> user defined data type
    -> declaration: 
    -> type User struct {
            firstName   string
            lastName    string
            birthDate   string
            createdDate time.Time
        }
    -> instantiation: 
    -> newUser = User{
            firstName:   firstName,
            lastName:    lastName,
            birthDate:   birthdate,
            createdDate: created,
	    }
    -> if we keep the order same as declared in struct then we can instantiate like this
    -> newUser = User{
            firstName,
            lastName,
            birthdate,
            created,
        }
    -> if we call a function with all the arguments required by the struct 
    -> and the function if creating the new object and returning it 
    -> in this case 2 instances of struct will be created
    -> first is the actual instance and other one is copy which is returned
    -> the first will be removed relatively quickly by garbage collector
    -> still if we have complex structs it can occupy lots of space
    -> To avoid this we can use pointers
    -> we can create object and return the pointer of it
    -> if we pass pointer to struct to another function
    -> we don't have to dereference it to access its properties
    -> so instead of (*user).firstName we can use user.firstName(go will dereference it for you) directly
    -> but both of them works
    -> we can connect a struct and a function(i.e make function method of struct)
    -> syntax: func (user User) outputDetails() {}
    -> we have added special reciever argument here
    -> and this reciever argument connects function to which type reciever argument is.

22. os.Create(filePath)
    -> is used to create file
    -> and we can also write data to this newly created file
    -> ex: file, _ := os.Create(prod.id+".txt")
           file.WriteString(content)
    
23. arrays
    -> declartion: [size]dataType{items}
    -> [4]float64{1.0, 2.99, 3.99, 4.0} or var prices [4]float64; prices = [4]float64{1.0, 2.99}

24. array slice method
    -> prices[1:3] will have elements from idx 1 to excluding 3
    -> prices[:3] will have elements from idx 0 to excluding 3
    -> prices[1:] will have all the elements starting idx 1
    -> if we create a new array by using slice on an array
    -> and override the values in the new array
    -> values in the original array will also gets modified
    -> so on slice a new array is not getting created but we are storing the just the references of part of the array
    -> ex: prices := [4]float64{1.0, 2.99, 3.99, 4.0}
           featuredPrices := prices[1:3]
           featuredPrices[0] = 199.99
           fmt.Println(prices) -> {1.0, 199.99, 3.99, 4.0}

25. len() inbuilt go function
    -> gives the number of elements in an slice
    -> ex: len(prices)

26. cap() inbuilt go function
    -> gives the capacity of the array
    -> ex:  prices := [4]float64{1.0, 2.99, 3.99, 4.0}
	        featuredPrices := prices[1:]
	        highlightedPrices := featuredPrices[:1]
	        fmt.Println(len(highlightedPrices), cap(highlightedPrices)) -> 1 3
            highlightedPrices = highlightedPrices[:3]
            fmt.Println(highlightedPrices, len(highlightedPrices), cap(highlightedPrices)) -> [2.99 3.99 4.0] 3 3
    -> highlightedPrices are based on featuredPrices which in turn based on the prices
    -> so they share the same array under the hood 
    -> highlightedPrices only have one element because it starts at idx 1 and ends at idx 1
    -> but it has a heigher capacity
    -> because the original slice on which highlightedPrices is based have more elements to its right
    -> for highlightedPrices we selected only one element(i.e [:1]) but theoratically we could select more elements
    -> and that's why we have the overall capacity of 3
    -> why not 4? since the original array has 4 elements
    -> because when we use slice we can select more towards the end of the array but not towards the start.
    -> we can also reslice and takes more elements from the right

27. Dynamic Lists With Slices
    -> we can create a dynamic slice by omitting the length: prices := []float64{1.99, 2.99}
    -> by creating an array like this Go will automatically create a slice for you
    -> and since the slice is always based on an array
    -> it will also create an array for you behind the scenes
    -> but it will automatically ditch that array and create a new array if your slice grows beyond the bounds
    -> To append an element into the array: updatedPrices := append(prices, 5.33)
    -> but it will also return a brand new slice
    -> so it does not add it to the original slice but what append does is tells Go that
    -> we want to add an item to be added to the slice and therefore also to the underlying array
    -> and ofcourse an array has fixed length so what Go will do in this case
    -> is it will create a brand new array and add that element into that brand new array
    -> which is created such that it has the capacity of that new array
    -> fmt.Println(updatedPrices, prices) -> [1.99 2.99 5.33] [1.99 2.99]
    -> to delete an element there is no inbuild function
    -> but we can use prices = prices[1:] to delete the first element
    -> append can take inifite number of arguments: append(prices, 5.99, 6.99, 7.99, 8.99)

28. unpacking list values
    -> syntax: discountPrices := []float64{101.99, 80.99, 100.10}
               prices := append(prices, discountPrices...) 
    -> ... pulls out all the elements in the array and use them as seperate elements

29. maps
    -> syntax: websites := map[string]string{"google": "https://google.com"}
    -> delete a key value pair: delete(websites, "google")

control structures

30. for loop
    -> syntax: for i := chosenNumber; i >= 1; i-- {}
    -> To iterate over an array: for idx, value := range inputNumbers {}

31. there is no while loop in go
    -> for isEnteringNumbers == true {}

32. split func
    -> strings.split(inputStr, ",")
    -> it returns a slice of string

33. To generated actual random number:
    -> ex- var randSource = rand.NewSource(time.Now().UnixNano())
           var randGenerator = rand.New(randSource)
           randGenerator.Intn(max - min) + min

34. To install a third party package:
    -> syntax: go get github.com/common-nighthawk/go-figure
    -> or you can import it in your files and then install it
    -> import("github.com/common-nighthawk/go-figure")
    -> and now run: go mod tidy

35: To build go projects so that they can run on machines where go is not installed.
    -> syntax: go build
    -> it will generate a single executable file

36. os.Executable()
    -> If we are generating some log file that won't be written in case of single executable file
    -> To fix this we can take help from "exPath, err := os.Executable()" method
    -> it will return the path to the executable file including the file name
    -> To drop the file name we can use another package "filepath"
    -> ex: exPath = filepath.Dir(exPath)
           file, err := os.Create(exPath + "/gamelog.txt")

37. Variable scoping
    -> variables are scoped to the block in which they are created and a block is marked by curly braces
    -> shadowing: variables declared in lower scope can shadow the variables declared heigher scope
    -> ex: functional vars can shadow global vars

38. make function
    -> we can create a slice something like this: hobbies := []string{"Sports", "Reading"}
    -> Here we can use 'append' to add more elements: hobbies = append(hobbies, "Cooking", "Dancing")
    -> when we create a slice like this what happens behind the scene is go creates an array
    -> and this array will have 2 values and when we use 'append', Go behind the scene creates
    -> a new array with more capacity and it will add new values together with the existing values
    -> and append will return the pointer this new array
    -> This isn't neccessarily a problem
    -> But if you have a slice where you know that you will add more values
    -> then Go gives you a way of creating that slice in a more efficient way
    -> where when you call append the next time Go doesn't neccessarily have to create a new array behind the scenes
    -> That's where 'make' function comes into play
    -> make allows you create a slice, a map and a channel
    -> and allows you to define in advance, how many empty slots should be created behind the scenes?
    -> syntax: hobbies := make([]string, 2, 10)
    -> first argument: type of slice, 
    -> second argument: we plan on having 2 elements, right from the start.
    -> third argument: it should reserve space for 10 items overall
    -> so now until we go above the 10 items, Go does not have to create a new array behind the scenes

39. Composite literal way
    -> syntax: hobbies := []string{"Cooking", "Dancing"}
    -> this way is called composite literal way of creating a slice.

40. new function
    -> new just allocates memory for a value and then creates a zero version of the value
    -> syntax: moreHobbies := new([]string)
               fmt.Println(*moreHobbies)
               *moreHobbies = make(*moreHobbies, "Cooking")
    -> new will return the pointer to that created value
    -> because its about only allocating memory, hence it gives you the address of that memory that was allocated.
    -> why do we have new?
    -> very niche situations or historic reasons
    -> new was there in go before make was added
    -> actual use new: to allocate space and create pointer for primitve types
    -> ex: number := new(int)


41. Custom Types
    -> type keyword: it's not used only with structs but also to create custom types
    -> ex: var people map[string]Person = map[string]Person{
                "P1": {"Max", 32},
            }
    -> here type is too long, we can create our own custom type in these situations
    -> ex: type PersonData map[string]Person
            var shorterPeople PersonData = PersonData{
                "P1": {"kuldeep", 27},
            }
    -> Another scenario where custom types could be useful
    -> we cannot make any function method of any premitive type
    -> ex: func (number int) pow() {
                return number * 2
            }
    -> this code won't work, we won't be able to attach pow function to int data type
    -> but what we can do is we can create our own custom type which will be based on int 
    -> and attach this pow function to that custom type
    -> ex: type customNumber int

            func (number customNumber) pow() customNumber {
                return number * 2
            }

            var dummyNumber customNumber = 5
            // or  dummyNumber := customNumber(5)
            fmt.Println(dummyNumber.pow(3))

42. Note realated to custom types:
    -> There also is another important aspect, you should be aware of:
    -> When working with custom types and adding your own methods to them, 
    -> you can end up in infinite loops, if you're not careful.
    -> ex: type CustomString string

            func (str CustomString) String() string {
                return fmt.Sprintf("My text: %s", str) // Causes an infinite loop!
            }
    -> %s forces a conversion of the value to a string. 
    -> This is achieved by calling the built-in String() method 
    -> which exists the built-in string type. Our own custom type, 
    -> CustomString, also has this method as we're adding it to it in the above code snippet.
    -> Hence that method will be picked by Go, 
    -> when you use %s and you use a value that is of your own type as a value for this placeholder 
    -> - that's what's happening in the above snippet.
    -> Therefore String() will be executed on str and 
    -> that will in turn run that code in the above snippet again - and again, and again.
    -> You can work around this by explicitly converting the value 
    -> which is of your own custom type to the default string type as shown in this snippet:
    -> ex: type CustomString string
            
            func (str CustomString) String() string {
                return fmt.Sprintf("My text: %s", string(str)) // string() converts CustomString to string
            }


43. Const variables
    -> const variables gets locked in when the code is compiled and not when run
    -> therefore function calls are not allowed
    -> we can define multiple const in one go
    -> syntax: const (
                    inputAttack = 1
                    inputSpecialAttack = 2
                    inputHeal = 3
                )
    -> when we have an incrementing list of numbers like above
    -> Go has a shortcout for this situation, instead of setting 1, 2, 3 manually
    -> you can set first value to 'iota'
    -> syntax const (
                    inputAttack = iota
                    inputSpecialAttack
                    inputHeal
                )
    -> now iota assume starting value as 0 and then next 1, 2..
    -> if you don't want to start at 0, you can simply use 'iota + 1' for first value

44. functions
    -> functions are first class citizens in Go
    -> They can be passed as parameters to other functions 
    -> also can be returned as a value from another function
    -> snippet: numbers := []int{1, 2, 3, 4, 5}
                doubled := transformNumbers(&numbers, double)
                tripled := transformNumbers(&numbers, triple)

45. anonmyous Functions
    -> when we have a case where a function wants another function as a parameter
    -> or where function returns a function
    -> then we can save some effort and time by using anonmyous function
    -> which allows you to define a function just in time, when you need it instead of in advance
    -> snippet: tripled := transformNumbers(&numbers, func(number int) int {
                    return number * 3
                })

46. closure
    -> snippet: func createTransformer(factor int) func(int) int {
                    return func(number int) int {
                        return number * factor
                    }
                }
    -> every anonmyous function is a closure and simply means that
    -> is when you use a variable from a scope in which the function is created
    -> then the value of that outer scope variable is locked into this created function

47. Variadic Functions(Restructre operator for functions in JS)
    -> snippet: func sumUp(numbers ...int) {
                    sum:=0
                    for _,num := range numbers {
                        sum+=num
                    }
                    return sum
                }
    -> we can also recieve multiple arguments
    -> func sumUp(firstNum int, numbers ...int) {}

48. Splitting Slices Into Parameter Lists
    -> if we have a slice and we want to call variadic function
    -> we can do that, its similar to destructure operator in JS
    -> snippet: numbers:= []int{1, 2, 4}
                sumUp(6, numbers...)

49. defer keyword
    -> defer will defer the execution of some line of code until the execution of all the statements in the Functions
    -> snippet: func storeData(data) {
                    file, err := os.Create("data.txt")
                    defer file.Close() // this statement will be executed at the end of function
                    // do some operations or write data into the file
                }
    -> one disadvantage to this approach is that you cannot accept some return value 
    -> if you are deferring a function call
    -> one workaround is using the anonymous function
    -> snippet: defer func() {
                    err := file.Close()
                    // handle error
                }()

50. panic function
    -> Go does not have try/catch or throw to handle error
    -> instead Go uses multiple return value approach to return err along with value
    -> ex: file, err := os.Create("data.txt")
    -> but sometimes errors are so severe that we don't want to continue further execution
    -> in the above example if the file is not created we don't want to do anything 
    -> of course we can try recreating the file or log and return from the function
    -> but you can also use special function that is built-in Go "panic" function
    -> the "panic" function allows you to generate an error that in the end will crash your program
    -> you can technically still recover from it but it is typically meant to cause an error
    -> that crashes your program because you are not able to handle an error appropriately
    -> or because you want the program to crash
    -> you should use this function with caution, and it should not be your default error handling mechanism
    -> only use it if you are in a state from which you can't really recover anyways
    -> ex: panic(err)

51. interfaces
    -> interfaces are like contracts, you sign a contract then you'll have to follow the rules
    -> implied by that contract. You have to fulfill that contract
    -> interfaces are contracts in you code with which you can enforce certain behaviors, certain functionalities
    -> checkout "interfaces" dir for example
    -> snippet: type logger interface {
                    log()
                    printMessage(message string) int
                }
                func createLog(data logger) {
                    // do more stuff
                    data.log()
                }
    -> interfaces are there to only define methods
    -> you can't add fields in there
    -> Go interfaces are only about methods
    -> There is one convention in naming the interfaces
    -> if the interface has only one method then interface name can be methodName+"er"
    -> ex: if there is only one method "Read" then interface name is "Reader"
    -> in Go we don't actively implement in interface like in other languages(like class Reader implements ReadInterface{})

52. empty interface
    -> we should use it when we want to accept any kind of value
    -> because we on the fly create a new interface definition that basically does not define anything
    -> it is basically take all data type
    -> it should be helpful when we want to write very generic functions
    -> for ex in below snippet func outputValue should accept all values int, bool, float...
    -> snippet: function outputValue(value interface{}) {
                    fmt.Println(value)
                }

53. Type Assertion
    -> it is used to check if a value is of a certain dataType
    -> for ex if we use empty interface, we are not sure what kind of dataType we will receive
    -> but using type assertion we can check data type at run time.
    -> snippet: func outputValue(value interface{}) {
                    val, ok := value.(string)
                    fmt.Println(val, ok)
                }
    -> To get the type of a value: valType := value.(type), can be used only with switch

54. Type switches
    -> A type switch is a construct that permits several type assertions in series.
    -> A type switch is like a regular switch statement, 
    -> but the cases in a type switch specify types (not values), 
    -> and those values are compared against the type of the value held by the given interface value.
    -> The declaration in a type switch has the same syntax as a type assertion i.(T), 
    -> but the specific type T is replaced with the keyword type.
    -> snippet: switch v := i.(type) {
                case T:
                    // here v has type T
                case S:
                    // here v has type S
                default:
                    // no match; here v has the same type as i
                }
    -> This switch statement tests whether the interface value i holds a value of type T or S.
    -> In each of the T and S cases, the variable v will be of type T or S respectively 
    -> and hold the value held by i. In the default case (where there is no match), 
    -> the variable v is of the same interface type and value as i.
    -> snippet: func double(value interface{}) interface{} {
                    switch val := value.(type) {
                    case int:
                        return val * 2
                    case float64:
                        return val * 2
                    case []int: 
                        return append(val, val...)
                    default:
                        return ""
                    }
                }

55. Embedding Interfaces
    -> embedding means that you build a new interface or struct 
    -> by merging multiple existing ones into a new one.
    -> snippet: type Storer interface {
                    Store(fileName string)
                }

                type Prompter interface {
                    PromptForInput()
                }
                // combined interface of above 2 interfaces(embedding)
                type PromtStorer interface {
                    Storer
                    Prompter
                }
    -> when we want to define an argument of function which should have both
    -> the capabilities storing and propmting, we have created a new interface
    -> by embedding the 2 already existing interfaces

56. Embedding structs
    -> snippet: type userInputData struct {
                    input string
                }

                type user struct {
                    firstName string
                    lastName  string
                    // embedding another struct
                    *userInputData
                }

                func newUser(firstName string, lastName string) *user {
                    return &user{firstName: firstName, lastName: lastName, userInputData: &userInputData{}}
                }

                func main() {
                    user := newUser("kuldeep", "kashyap")
                    user.PromptForInput()
                    user.Store("test.txt")
                }

    -> see we can call the methods of embedded structs on our main struct itself
    -> if the main struct and embedded struct have the same properties or methods
    -> then priority will be given to main struct's methods and properties

57. concurrency
    -> execution in parallel
    -> Go gives us syntax to start 2 functions at the same time
    -> and these functions are called Goroutines
    -> go does not wait for the first task to complete before it starts second task
    -> snippet: go storeMoreData(50000, "5000_1.txt")
	            go storeMoreData(50000, "5000_2.txt")
	-> appending go in front of function call make it goroutine 
    -> and now Go will not wait until the first function execution is done
    -> instead it starts executing the statement after this line

58. channels
    -> channel is feature built-in to go that helps us with communication and data-management
    -> when working with concurrent code and therefore when working with goroutines
    -> snippet: channel := make(chan int)
                channel <- 1
    -> with the 'chan' keyword we tell 'make' and therefore go to create a channel
    -> then it's important to understand that channels are able to store values 
    -> chan int means that we want to create a channel which will store int
    -> '<-' built-in go operator which points at a channel
    -> and notes the value that should be sent to the channel
    -> and the direction of this arrow shows us the direction of the data flow.
    -> in this case we are sending a number into our channel
    -> snippet: <- channel
                <- channel
    -> if you read data from the channel Go will wait until data has been read.
    -> it means if in the your goroutines you do send data into a channel
    -> you effectively wait for those goroutines to finish
    -> as soon as we start listening to channels. Go will register this
    -> and it understands that we read one value once and then another value a second time
    -> as soon as first goroutine is done the first read from the channel will be done
    -> but the second read is still waiting for the value
    
59. Transmitting Values Via Channels
    -> snippet: func main() {
                    channel := make(chan int)

                    go generateValue(channel)
                    go generateValue(channel)
                    go generateValue(channel)
                    go generateValue(channel)

                    // x := <- channel
                    // y := <- channel

                    // sum := x + y

                    sum := 0
                    i := 0
                    for num := range channel {
                        sum += num
                        i++
                        if i == 4 {
                            close(channel)
                        }
                    }

                    fmt.Println(sum)
                }

                func generateValue(channel chan int) int {
                    sleepTime := randN.Intn(3)
                    time.Sleep(time.Duration(sleepTime) * time.Second)

                    result := randN.Intn(10)
                    channel <- result

                    return result
                }

60. Buffered Channels
    -> when we want to perform multiple operations simultaneously
    -> and we want to throttle these operations. we can do it using buffered channels
    -> snippet: make(chan int, 3)
    -> second argument in make for channel creation is buffer size default value is 0 means unbuffered
    -> so now with buffer size set to 3, you can write 3 values into this channel and as soon as
    -> you try to write a fourth value into it, Go will block the code execution, it will pause the program
    -> and not continue with the code execution until a space is empty again
    -> so until at least one value was read from the channel
    -> snippet: func main() {
                    channel := make(chan int)
                    limiter := make(chan int, 3)

                    go generateValue(channel, limiter)
                    go generateValue(channel, limiter)
                    go generateValue(channel, limiter)
                    go generateValue(channel, limiter)
                }

                func generateValue(channel chan int, limiter chan int) {
                    // as max size of this channel is 3 Go will pause the execution if it reaches its limit
                    limiter <- 1
                    fmt.Println("Generating value...")

                    time.Sleep(time.Duration(4) * time.Second)

                    channel <- randN.Intn(10)

                    // free up the buffered channel so that the paused task can continue
                    <-limiter
                }

61. The "select" Statement
    -> its like a switch statement but for channels
    -> suppose we want to fetch data it may be from DB or cache whichever is faster(Promise.race)
    -> snippet: func main() {
                    x := make(chan int)
                    y := make(chan int)

                    go generateValue(x)
                    go generateValue(y)

                    var a int
                    var b int

                    select {
                        case a <- x:
                            fmt.Println("X is finished first, value is %v", a)
                        case b <- x:
                            fmt.Println("Y is finished first, value is %v", b)
                    }

                }

62. To get test coverage
    -> command: go test -cover
    -> command: go test -coverageprofile=coverage.out && go tool cover -html=coverage.out 